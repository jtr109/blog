<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on jtr109&#39;s Castle</title>
    <link>https://jtr109.github.io/tags/javascript/</link>
    <description>Recent content in javascript on jtr109&#39;s Castle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 May 2019 14:08:00 +0800</lastBuildDate>
    
	<atom:link href="https://jtr109.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Intergate Vue in Django</title>
      <link>https://jtr109.github.io/posts/intergrate-vue-in-django/</link>
      <pubDate>Fri, 31 May 2019 14:08:00 +0800</pubDate>
      
      <guid>https://jtr109.github.io/posts/intergrate-vue-in-django/</guid>
      <description>Intergate Vue in Django What Project Will We Build We want to build a vue project with multiple pages. The Django view render these pages as templates.
Why We Build Such A Project If we seperate frond-end and back-end and all routers are handled by the front-end project. The attackers can fake the reponse of authentication and jump to the target pages. If the attackers get the front-end code all in one package without authentication, they can parse out API easily.</description>
    </item>
    
    <item>
      <title>ES6 学习笔记</title>
      <link>https://jtr109.github.io/posts/es6-note/</link>
      <pubDate>Thu, 07 Sep 2017 16:41:23 +0800</pubDate>
      
      <guid>https://jtr109.github.io/posts/es6-note/</guid>
      <description>async 函数  async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。 async 函数的返回值是一个 Promise 对象, 可以使用 then 指定下一步操作. 只要一个 await 语句后面的 Promise 变为 reject, 那么整个 async 函数都会中断执行  并发异步请求 // 写法一 let [foo, bar] = await Promise.all([getFoo(), getBar()]); // 写法二 let fooPromise = getFoo(); let barPromise = getBar(); let foo = await fooPromise; let bar = await barPromise; for 循环并发异步请求 async function dbFuc(db) { let docs = [{}, {}, {}]; let promises = docs.map((doc) =&amp;gt; db.</description>
    </item>
    
    <item>
      <title>Javascript 中 for 循环的使用方式</title>
      <link>https://jtr109.github.io/posts/about-js-for-loop/</link>
      <pubDate>Wed, 16 Aug 2017 10:51:52 +0800</pubDate>
      
      <guid>https://jtr109.github.io/posts/about-js-for-loop/</guid>
      <description>关于 for ... in 和 for ... of 简单记忆 由于 es6 中 for ... of 的加入, 对于记得不是很清楚的人会很容易产生混淆.
for ... in 可以理解为获取 &amp;ldquo;index&amp;rdquo;. 在 Array 类型中, 调用 for ... in 获取的确实就是每个元素对应的 index, 而在 Object 中, 就是对应相应的 key 值.
for ... of  只可以用于 Array.
特别注意 for ... of 只能用于 Array, 用于 Object 或者 undefined 均会报错. 所以对于使用对象可能出现 undefined 的情况不要使用for ... of.
示例 对 Array 使用:
let a = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2} let b = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;] let c = undefined for (let i in a) { console.</description>
    </item>
    
  </channel>
</rss>