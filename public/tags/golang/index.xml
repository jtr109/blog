<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on jtr109&#39;s Castle</title>
    <link>https://jtr109.github.io/tags/golang/</link>
    <description>Recent content in golang on jtr109&#39;s Castle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 21 Aug 2018 17:33:29 +0800</lastBuildDate>
    
	<atom:link href="https://jtr109.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unit test of Golang</title>
      <link>https://jtr109.github.io/posts/unit-test-of-golang/</link>
      <pubDate>Tue, 21 Aug 2018 17:33:29 +0800</pubDate>
      
      <guid>https://jtr109.github.io/posts/unit-test-of-golang/</guid>
      <description>notes 测试最重要的就是处理依赖, 覆盖所有的流程, 合理的 assertion.
我们在一个测试中, 不应对其依赖的实现做测试, 所以我们需要 mock 掉相应的实现. 由于 Golang 中 first class function 的存在, 我们可以通过在 package 中定义变量 (var) 的方式将依赖提到包级作用域中, 在测试中替换对应的逻辑, 从而不会对包中的执行代码产生影响.
依赖返回的类型主要有两种: 基本类型组合, interface
对于基本类型及其组合, 我们可以直接定义一个简单的工厂函数来生成他的返回值.
而如果依赖返回的是一个相对复杂的 interface, we need to implement an structure satisfy the interface.
Links  Golang unit testing interfaces MX record First class function in Golang  </description>
    </item>
    
    <item>
      <title>Golang Init Function</title>
      <link>https://jtr109.github.io/posts/golang-init-function/</link>
      <pubDate>Thu, 16 Aug 2018 18:06:30 +0800</pubDate>
      
      <guid>https://jtr109.github.io/posts/golang-init-function/</guid>
      <description>When is the init function called?  After all the variable declarations in the package have evaluated their initializers. Only after all the imported packages have been initialized.  Order of package initialization  initialization of imported packages (recursive definition) computing and assigning initial values for variables declared in a package block executing init functions inside the package  Usecase of init function  The initializations can not be expressed as declarations.</description>
    </item>
    
  </channel>
</rss>